@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<MudBreadcrumbs Items="@_breadcrumbItems"></MudBreadcrumbs>
<MudStack Spacing="4" Class="m-4">
    <MudText Typo="Typo.h4">Weather</MudText>
    <MudText Typo="Typo.body1">This component demonstrates fetching data from the server.</MudText>
    @if (forecasts == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <MudSimpleTable Hover="true">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    }
</MudStack>

@code {
    private WeatherForecast[]? forecasts;

    private List<BreadcrumbItem>? _breadcrumbItems = new()
    {
        new BreadcrumbItem("Dashboard", "/"),
        new BreadcrumbItem("Weather", "/weather")
    };

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}